This project is an implementation of a fault-tolerant distributed file system. This project consists of three parts: server nodes in the distributed system, a load balancer that maintains the transparency of the server pool to the client, and the client, which requests files, and in our tests, kills server arbitrary processes to test our system and ensure file validity in the event of failure.


Server Node:

Each server node is represented by a process in our implementation, and each server sends periodic heartbeats to one other server, so that the pool of servers forms a heartbeating ring. In our trials, server faults were always detected and recovered within a second. Each server held two TCP connections for heartbeating, and a TCP connection to the load balancer for file requests and failure detection. 


Load Balancer:

The load balancer was responsible for forming a layer of abstraction between the client and the server pool. It queued requests from the client, and recording server loads from the server pool. Each file requested by a client was stored at multiple server nodes, and the load balancer was responsible for determining the server currently under the lightest load. Likewise, the load balancer initialized the fault detetection system, and handled server crashes by redistributing files as necessaryr, even restarting active file transfers if necessary. 


Client:

In our implementation, the client naively requested files from a input file, without pausing in between requests. We used the client in our trials to test the performance and fault tolerance of our system. 
